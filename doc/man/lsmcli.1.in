.TH LSMCLI "1" "June 2014" "lsmcli @VERSION@" "libStorageMgmt"
.SH NAME
lsmcli - LibStorageMgmt command line interface

.SH SYNOPSIS
.B lsmcli \fIcommand\fR [\fIGLOBAL OPTIONS\fR]...[\fICOMMAND OPTIONS\fR]...

.SH DESCRIPTION
lsmcli is the command line tool for the libStorageMgmt library.  This tool
allows users to do one off storage related management operations or to script
management of their storage.

.SH PREREQUISITES
.TP 8
* libstoragemgmt daemon.
The daemon '\fBlsmd\fR' is needed by every lsmcli command for socket initial
communication.
.TP 8
* URI(Uniform Resource Identifier)
URI is used to in deify which and how the plugin should communicate with
storage array. The valid URI format is:
.RS 12
.nf
\fBplugin://<username>@host:<port>?<query_string_parameters>\fR
.br
\fBplugin+ssl://<username>@host:<port>?<query_string_parameters>\fR
.fi
.RE 1
.RS 8
Quick examples(please refer to "LibStorageMgmt User Guide" for detail):
.RE 1
.RS 12
* Simulator:
.RS 4
\fBsim://\fR
.br
\fBsimc://\fR
.RE 1
.RS 12
* NetApp ONTAP:
.RS 4
\fBontap://username@host\fR
.br
\fBontap+ssl://username@host\fR
.RE 1
.RS 12
* Storage Array support SMI-S(like, EMC CX/VNX, HDS AMS, IBM SVC/DS, LSI
MegaRAID and etc):
.RS 4
\fBsmis://username@host:<port>?namespace=<namespace>\fR
.br
\fBsmis+ssl://username@host:<port>?namespace=<namespace>\fR
.RE 1
.RS 8
You can pass URI to lsmcli via one of these ways:
.RS 4
* Using '\fB-u\fR, \fB--uri\fR' argument.
.br
* Using '\fBLSMCLI_URI\fR' environment variable.
.br
* Add this line into \fB$HOME/.lsmcli\fR:
.RS 4
uri=\fI<URI>\fR
.RE 1
.TP 8
* Password
All plugins require authentication(except simulator). You can pass it to
lsmcli via one of these ways:
.RS 12
* Using '\fB-P\fR, \fB--prompt\fR' argument to prompt fro password.
.br
* Using '\fBLSMCLI_PASSWORD\fR' environment variable.
.RE 1
.SH "GLOBAL OPTIONS"
.TP 15
\fB--version\fR
Show program's version number and exit
.TP 15
\fB-h\fR, \fB--help\fR
Show this help message and exit. Will show help message of certain command if
command defined.
.TP 15
\fB-u\fR \fI<URI>\fR, \fB--uri\fR \fI<URI>\fR
Uniform Resource Identifier (env LSMCLI_URI)
.TP 15
\fB-P\fR, \fB--prompt\fR
Prompt for password (env LSMCLI_PASSWORD)
.TP 15
\fB-H\fR, \fB--human\fR
Print sizes in human readable format
(e.g., KiB, MiB, GiB, TiB, PiB, EiB)
.TP 15
\fB-t\fR \fI<SEP>\fR, \fB--terse\fR \fI<SEP>\fR
Print output in terse form with "SEP" as a record separator without header
unless '--header' defined.
.TP 15
\fB--header\fR
Include the header with terse
.TP 15
\fB-e\fR, \fB--enum\fR
Display enumerated types as numbers instead of text
.TP 15
\fB-f\fR, \fB--force\fR
Bypass confirmation prompt for data loss operations
.TP 15
\fB-w\fR \fI<WAIT>\fR, \fB--wait\fR=\fI<WAIT>\fR
Command timeout value in ms (default = 30s)
.TP 15
\fB-b\fR
Run the command asynchronously instead of waiting for completion. The lsmcli
command will exit with exit code(7) and job id will be written to STDOUT when
a command is still executing on the storage array.
Use 'job-status --id \fI<job id>\fR' to inquire on the progress of the command.
Some array or plugin might not support running asynchronous job, in that
circumstance, \fb-b\fR will be effective, command will wait until finished.
.TP 15
\fB-s\fR, \fB--script\fR
Displaying data in script friendly way.
.br
Without this option, data is displayed in this manner:

    ID                                   | Name  | Member IDs
    -----------------------------------------------------------
    87720e90-3a83-11df-b8bf-00a0980ad71b | aggr0 | ID_A
                                         |       | ID_B
    aa0ffc70-3dba-11df-b8cf-00a0980ad71b | aggr1 | ID_C
                                         |       | ID_D

With this option, data is displayed in this manner.

    --------------------------------------------------
    ID          | 87720e90-3a83-11df-b8bf-00a0980ad71b
    Name        | aggr0
    Member IDs  | ID_A
                | ID_B
    --------------------------------------------------
    ID          | aa0ffc70-3dba-11df-b8cf-00a0980ad71b
    Name        | aggr1
    Member IDs  | ID_C
                | ID_D
    --------------------------------------------------

Please note:
.br
Due to console text width limitation(78), NOT all mandatory properties will be
displayed in column way(default display way).
But all mandatory properties will be displayed in script way. When with "-o,
--optional", both mandatory properties and optional properties will be
displayed.

.SH COMMANDS
.SS list
List information on LSM objects
.TP 15
\fB--type\fR \fI<TYPE>\fR
Required. Valid values are:
.br
\fBVOLUMES\fR, \fBINITIATORS\fR, \fBPOOLS\fR, \fBFS\fR, \fBSNAPSHOTS\fR,
\fBEXPORTS\fR, \fBDISKS\fR,
.br
\fBNFS_CLIENT_AUTH\fR, \fBACCESS_GROUPS\fR,
\fBSYSTEMS\fR, \fBPLUGINS.
.TP
\fB--fs\fR \fI<FS_ID>\fR
Required for \fB--type\fR=\fBSNAPSHOTS\fR. List the snapshots of certain
filesystem.
PLUGINS will list all supported plugins of LSM, not only the current one.
.TP
\fB-o\fR, \fB--optional\fR
Optional. Retrive and display optional data in '--script, -s' display way.
.TP
\fB--sys\fR \fI<SYS_ID>\fR
Search resources from system with SYS_ID. Only supported when querying these
types of resources: \fBVOLUMES\fR, \fBPOOLS\fR, \fBFS\fR,
\fBSNAPSHOTS\fR, \fBDISKS\fR, \fBACCESS_GROUPS\fR.
.TP
\fB--pool\fR \fI<POOL_ID>\fR
Search resources from pool with POOL_ID. Only supported by these types of
resources: \fBVOLUMES\fR, \fBPOOLS\fR, \fBFS\fR.
.TP
\fB--vol\fR \fI<VOL_ID>\fR
Search resources from volume with VOL_ID. Only supported by these types of
resources: \fBVOLUMES\fR, \fBACCESS_GROUPS\fR.
.TP
\fB--disk\fR \fI<DISK_ID>\fR
Search resources from disk with DISK_ID. Only supported by these types of
resources: \fBDISK\fR.
.TP
\fB--ag\fR \fI<AG_ID>\fR
Search resources from access group with AG_ID. Only supported by these types
of resources: \fBACCESS_GROUPS\fR, \fBVOLUMES\fR.
.TP
\fB--fs\fR \fI<FS_ID>\fR
Search resources from file system with FS_ID. Only supported by these types
of resources: \fBFS\fR.
.TP
\fB--nfs-export\fR \fI<NFS_EXPORT_ID>\fR
Search resources from NFS export with NFS_EXPORT_ID. Only supported by these
types of resources: \fBEXPORTS\fR.

.SS job-status
Retrieve information about a job.
.TP 15
\fB--job\fR \fI<JOB_ID>\fR

.SS capabilities
Retrieves array capabilities
.TP 15
\fB--sys\fR \fI<SYS_ID>\fR
Required. ID of the system to query for capabilities

.SS plugin-info
Retrieves plugin description and version for current URI.

.SS volume-create
Creates a volume (AKA, LUN or logical volume).
.TP 15
\fB--name\fR \fI<NAME>\fR
Required. Volume name
.TP
\fB--size\fR \fI<SIZE>\fR
Required. Volume size(See \fBSIZE OPTION\fR for allowed formats).
.TP
\fB--pool\fR \fI<POOL_ID>\fR
Required. ID of pool.
.TP
\fB--provisioning\fR \fI<THINP_TYPE>\fR
Optional. Provisioning type. Valid values are: DEFAULT, THIN, FULL.
\fBDEFAULT\fR means let plugin choose. \fBTHIN\fR means requiring a Thin
Provisioning enabled volume. \fBFULL\fR means requiring a fully allocated
volume.

.SS volume-delete
.TP 15
Delete a volume given its ID
.TP
\fB--vol\fR \fI<VOL_ID>\fR
Required. The ID of volume to delete.

.SS volume-resize
.TP 15
Re-sizes a volume, requires:
.TP
\fB--vol\fR \fI<VOL_ID>\fR
Required. The ID of volume to resize.
.TP
\fB--size\fR \fI<NEW_SIZE>\fR
Required. The new size of volume.(See \fBSIZE OPTION\fR for allowed formats).
Due to boundary alignment concern, array might return a volume with slightly
bigger size than requested.

.SS volume-replicate
Creates a new volume and replicates provided volume to it.
.TP 15
\fB--vol\fR \fI<VOL_ID>\fR
Required. The ID of volume to replicate.
.TP
\fB--name\fR \fI<NAME>\fR
Required. The name for new volume to hold replicated data.
.TP
\fB--rep-type\fR \fI<REPL_TYPE>\fR
Required. Valid types of replication are
.br
\fBSNAPSHOT\fR, \fBCLONE\fR, \fBCOPY\fR, \fBMIRROR_ASYNC\fR,
\fBMIRROR_SYNC\fR. TODO: Explain every type here.
.TP
\fB--pool\fR \fI<POOL_ID>\fR
Optional. The ID of pool where the new volume should create in. If not define,
replicate volume and source volume will be in the same pool.

.SS volume-replicate-range
Replicates a portion of a volume, like only replicate the first 1024 block
of certain volume to another volume.
.TP 15
\fB--src-vol\fR \fI<SRC_VOL_ID>\fR
Required. The ID of replication source volume.
.TP
\fB--dst-vol\fR \fI<DST_VOL_ID>\fR
Required. The ID of replication destination volume.
.TP
\fB--rep-type\fR \fI<REPL_TYPE>\fR
Required. Valid types of replication are
.br
\fBSNAPSHOT\fR, \fBCLONE\fR, \fBCOPY\fR, \fBMIRROR_ASYNC\fR,
\fBMIRROR_SYNC\fR. TODO: Explain every type here.
.TP
\fB--src-start\fR \fI<SRC_START_BLK>\fR
Required. Replication source volume start block number. Must in pair with
\fB--count\fR and \fB--dst-start\fR.
If you have several non-continuous block ranges, you can define repeatly
define this arugument, like '\fB--src-start 0 --dst-start 0 --count 1024
--src-start 2048 --dst-start 2048 --count 2048\fR'
.TP
\fB--dst-start\fR \fI<DST_START_BLK>\fR
Required. Replication destination volume start block number. Must in pair with
\fB--count\fR and \fB--src-start\fR.
.TP
\fB--count\fR \fI<BLK_COUNT>\fR
Required. The count of replicated block startting from \fB--src-start\R block.
Must in pair with \fB--src-start\fR and \fB--dst-start\fR.

.SS volume-replicate-range-block-size
Size of each replicated block on a system in bytes.
.TP 15
\fB--sys\fR \fI<SYS_ID>\fR
Required. ID of the system to query for replicated block size.

.SS volume-dependants
Returns True if volume has a dependant child, like replication.
.TP 15
\fB--vol\fR \fI<VOL_ID>\fR
Required. The ID of volume to query dependency.

.SS volume-dependants-rm
Removes volume dependencies(like replication).
.TP 15
\fB--vol\fR \fI<VOL_ID>\fR
Required. The ID of volume to remove dependency.

.SS volume-access-group
Lists the access group(s) that have access to the provided volume.
.TP 15
\fB--vol\fR \fI<VOL_ID>\fR
Required. The ID of volume to query access.

.SS volumes-accessible-initiator
Lists the initiator(s) that have access to the provided volume.
.TP 15
\fB--vol\fR \fI<VOL_ID>\fR
Required. The ID of volume to query access.

.SS volume-mask
.TP 15
Grant access group RW access to certain volume. Like LUN masking
or NFS export.
.TP
\fB--vol\fR \fI<VOL_ID>\fR
Required. The ID of volume to access.
.TP
\fB--ag\fR \fI<AG_ID>\fR
Required. The ID of access group to grant.

.SS volume-unmask
.TP 15
Revoke access group RW access to specified volume.
.TP
\fB--vol\fR \fI<VOL_ID>\fR
Required. The ID of volume to revoke.
.TP
\fB--ag\fR \fI<AG_ID>\fR
Required. The ID of access group to revoke.

.SS access-group-create
.TP 15
Create an access group.
.TP
\fB--name\fR \fI<AG_NAME>\fR
Required. The human friendly name for new access group.
.TP
\fB--init\fR \fI<INIT_ID>\fR
Required. The first initiator ID of new access group.
.TP
\fB--init-type\fR \fI<INIT_TYPE>\fR
Required. The initiator type. Valid values are: \fBWWPN\fR, \fBWWNN\fR,
\fBISCSI\fR, \fBHOSTNAME\fR, \fBSAS\fR.
.TP
\fB--sys\fR \fI<SYS_ID>\fR
Required. The ID of system where this access group should reside on.

.SS access-group-add
Adds an initiator to an access group.
.TP 15
\fB--ag\fR \fI<AG_ID>\fR
Required. ID of access group.
.TP
\fB--init\fR \fI<INIT_ID>\fR
Required. ID of initiator to add.
.TP
\fB--init-type\fR \fI<INIT_TYPE>\fR
Required. The initiator type. Valid values are: \fBWWPN\fR, \fBWWNN\fR,
\fBISCSI\fR, \fBHOSTNAME\fR, \fBSAS\fR.

.SS access-group-remove
Removes an initiator from an access group.
.TP 15
\fB--ag\fR \fI<AG_ID>\fR
Required. ID of access group.
.TP
\fB--init\fR \fI<INIT_ID>\fR
Required. ID of initiator to remove.

.SS access-group-delete
Delete an access group.
.TP 15
\fB--ag\fR \fI<AG_ID>\fR
Required. ID of access group to delete.

.SS access-grant
Grants access to an initiator to a volume
.TP 15
\fB--init\fR \fI<INIT_ID>\fR
Required. ID of initiator to grant access.
.TP
\fB--init-type\fR \fI<INIT_TYPE>\fR
Required. The initiator type. Valid values are: \fBWWPN\fR, \fBWWNN\fR,
\fBISCSI\fR, \fBHOSTNAME\fR, \fBSAS\fR.
.TP
\fB--vol\fR \fI<VOL_ID>\fR
Required. The ID of volume to grant access.

.SS access-revoke
Removes access for an initiator to a volume
.TP 15
\fB--vol\fR \fI<VOL_ID>\fR
Required. The ID of volume to revoke.
.TP
\fB--init\fR \fI<INIT_ID>\fR
Required. ID of initiator to revoke.

.SS access-group-volumes
Lists the volumes that the access group has been granted access to.
.TP 15
\fB--ag\fR \fI<AG_ID>\fR
Required. The ID of access group to query.

.SS initiators-granted-volume
Lists the initiators that have been granted access to specified volume
.TP 15
\fB--init\fR \fI<INIT_ID>\fR
Required. The ID of initiator to query.

.SS iscsi-chap
Configures ISCSI inbound/outbound CHAP authentication
.TP 15
\fB--init\fR \fI<INIT_ID>\fR
Required. The ID of iSCSI initiator to configure.
.TP
\fB--in-user\fR \fI<IN_USER>\fR
Optional. Inbound CHAP user name.
.TP
\fB--in-pass\fR \fI<IN_PASS>\fR
Optional. Inbound CHAP password
.TP
\fB--out-user\fR \fI<OUT_USER>\fR
Optional. Outbound CHAP user name.
.TP
\fB--out-pass\fR \fI<OUT_PASS>\fR
Optional. Outbound CHAP password

.SS fs-create
Creates a filesystem
.TP 15
\fB--name\fR \fI<NAME>\fR
Required. Human friendly name for new filesystem.
.TP
\fB--size\fR \fI<SIZE>\fR
Required. Volume size(See \fBSIZE OPTION\fR for allowed formats).
.TP
\fB--pool\fR \fI<POOL_ID>\fR
Required. ID of pool to hold the new filesystem.

.SS fs-delete
Delete a filesystem
.TP 15
\fB--fs\fR \fI<FS_ID>\fR
Required. ID of the filesystem to delete.

.SS fs-resize
Resizes a filesystem
.TP 15
\fB--fs\fR \fI<FS_ID>\fR
Required. ID of the filesystem to resize.
.TP
\fB--size\fR \fI<NEW_SIZE>\fR
Required. New size of filesystem. See \fBSIZE OPTION\fR for allowed
formats.

.SS fs-export
Export a filesystem via NFS.
.TP 15
\fB--fs\fR \fI<FS_ID>\fR
Required. ID of the filesystem to export.
.TP
\fB--exportpath\fR \fI<EXPORT_PATH>\fR
Optional. NFS server export path. e.g. '/foo/bar'.
.TP
\fB--anonuid\fR \fI<ANONY_UID>\fR
Optional. The UID(User ID) to map to anonymous user.
.TP
\fB--anongid\fR \fI<ANONY_GID>\fR
Optional. The GID(Group ID) to map to anonymous user.
.TP
\fB--auth-type\fR \fI<AUTH_TYPE>\fR
Optional. NFS client authentication type. This is just a place holder, not
supported yet.
.TP
\fB--root-host\fR \fI<ROOT_HOST>\fR
Optional. Repeatable. The host/IP has root access. For two or more hosts/IPs:
'\fB--root-host hostA --root-host hostB\fR'.
.TP
\fB--ro-host\fR \fI<RO_HOST>\fR
Optional. Repeatable. The host/IP has read only access. For two or more
hosts/IPs: '\fB--ro-host hostA --ro-host hostB\fR'.
.TP
\fB--rw-host\fR \fI<RW_HOST>\fR
Optional. The host/IP has read/write access. For two or more hosts/IPs:
'\fB--rw-host hostA --rw-host hostB\fR'.

.SS fs-unexport
Delete an NFS export
.TP 15
\fB--fs\fR \fI<FS_ID>\fR
Required. ID of the filesystem to unexport.

.SS fs-clone
Creates a file system clone. The 'clone' means point in time read writeable
space efficient copy of data, aka read-writable snapshot.
.TP 15
\fB--src-fs\fR \fI<SRC_FS_ID>\fR
Required. The ID of the filesystem to clone.
.TP
\fB--dst-name\fR \fI<DST_FS_NAME>\fR
Required. The name for newly created destination file system.
.TP
\fB--backing-snapshot\fR \fI<BE_SS_ID>\fR
Required. TODO: explain 'backing-snapshot' here.

.SS fs-snap-create
Creates a snapshot of certain filesystem. The snapshot means using
copy-on-write technology to ensure the data will not be erased for future
changes since snapshot creation time(PIT, point in time). The ordinal
filesystem will still be read writable, the snapshot will be read only
containing the data of PIT.
.TP 15
\fB--name\fR \fI<SNAP_NAME>\fR
Required. The human friendly name of new snapshot.
.TP
\fB--fs\fR \fI<FS_ID>\fR
Required. The ID of filesystem to create snapshot against.
.TP
\fB--file\fR \fI<FILE_PATH>\fR
Optional. Repeatable. With this option defined, the snapshot will only
containing the defined file/path. For two or more files/paths:
'\fB--file fileA --file pathB\fR'.

.SS fs-snap-delete
Deletes a snapshot.
.TP 15
\fB--snap\fR \fI<SNAP_ID>\fR
Required. The ID of snapshot to delete.
.TP
\fB--fs\fR \fI<FS_ID>\fR
Required. The ID of filesystem. TODO. No idea why we need fs_id.

.SS fs-snap-restore
Restores a FS or specified files to previous snapshot state. This will discard
all the changes to filesystem since snapshot.
.TP 15
\fB--fs\fR \fI<FS_ID>\fR
Required. The ID of filesystem to restore.
.TP
\fB--snap\fR \fI<SNAP_ID>\fR
Required. The ID of snapshot to restore.
.TP
\fB--file\fR \fI<FILE_PATH>\fR
Optional. Repeatable. With this option defined, will only restore the defined
files. For two or more files/paths:
'\fB--file fileA --file pathB\fR'.
.TP
\fB--fileas\fR \fI<NEW_FILE_PATH>\fR
Optional. Repeatable. With this option defined, the restored file will be
saved to defined path or filename. For two or more files/paths:
'\fB--file fileA --file fileB --fileas old_fileA --fileas old_fileB\fR'.

.SS fs-dependants
Returns True if a child dependency(snapshot or clone) exists.
.TP 15
\fB--fs\fR \fI<FS_ID>\fR
Required. The ID of filesystem to query.
.TP
\fB--file\fR \fI<FILE_PATH>\fR
Optional. Repeatable. Only check defined files for snapshot or clone.
For two or more files/paths: '\fB--file fileA --file pathB\fR'.

.SS fs-dependants-rm
Removes filesystem dependencies(snapshot or clone).
.TP 15
\fB--fs\fR \fI<FS_ID>\fR
Required. The ID of filesystem to remove dependency.
.TP
\fB--file\fR \fI<FILE_PATH>\fR
Optional. Repeatable. Only remove defined files for snapshot or clone.
For two or more files/paths: '\fB--file fileA --file pathB\fR'.

.SS file-clone
Creates a clone of a file (thin provisioned).
.TP 15
\fB--src\fR \fI<SRC_FILE_PATH>\fR
Required. Repeatable. Source file to clone (relative path).
For two or more files/paths: '\fB--src fileA --src fileB\fR'.
.TP
\fB--dst\fR \fI<DST_FILE_PATH>\fR
Required. Repeatable. Destination file to clone (relative path).
For two or more files/paths:
'\fB--src fileA --src fileB --dst old_fileA --dst old_fileB\fR'.

.SS pool-create
Creates a storage pool. LibStorageMgmt will automatically choose the correct
pool members to assemble new pool. This require POOL_CREATE capability.
.TP 15
\fB--name\fR \fI<POOL_NAME>\fR
Required. Human friendly name for new pool.
.TP
\fB--size\fR \fI<POOL_SIZE>\fR
Required. The size of new pool. Due to data alignment or other issue, the
size of new pool might larger than requested.
See \fBSIZE OPTION\fR for allowed formats.
.TP
\fB--sys\fR \fI<SYS_ID>\fR
Required. ID of the system to create new pool.
.TP
\fB--raid-type\fR \fI<RAID_TYPE>\fR
Optional. The RAID type of new pool. Valid values are:
\fBNOT_APPLICABLE\fR, \fBJBOD\fR, \fBRAID0\fR, \fBRAID1\fR, \fBRAID5\fR,
\fBRAID6\fR, \fBRAID10\fR, \fBRAID50\fR, \fBRAID51\fR, \fBRAID60\fR,
\fBRAID61\fR.
.br
The \fBNOT_APPLICABLE\fR means pool only contain 1 member.
If not defined, will let array to determine the RAID type.
.br
When using with \fB--member-type POOL\fR, \fB--raid-type\fR should be unset or
defined as \fBNOT_APPLICABLE\fR.
.TP
\fB--member-type\fR \fI<MEM_TYPE>\fR
Optional. The type of resource to create new pool. Valid values are:
\fBDISK\fR, \fBVOLUME\fR, \fBPOOL\fR, \fBDISK_ATA\fR, \fBDISK_SATA\fR,
\fBDISK_SAS\fR, \fBDISK_FC\fR, \fBDISK_SOP\fR \fBDISK_SCSI\fR, \fBDISK_NL_SAS,
\fBDISK_HDD\fR, \fBDISK_SSD\fR, \fBDISK_HYBRID\fR.
.br
The \fBDISK\fR member type means creating pool from disk(s). For \fBDISK_\fR
prefixed types, they are used to request new pool creating from certain type
of DISK.
\fBDISK_SOP\fR indicate SCSI over PCI-E, normally a PCI-E based SSD.
\fBDISK_HYBRID\fR indicate HDD and SSD hybrid(mixed) disk.
.br
The \fBVOLUME\fR member type means creating pool from volume(s).
.br
The \fBPOOL\fR member type means create sub-pool from another pool.

.SS pool-create-from-disks
Create a new pool by specifying which disks to use with which RAID type.
This require POOL_CREATE_FROM_DISKS capability.
.TP 15
\fB--name\fR \fI<POOL_NAME>\fR
Required. Human friendly name for new pool.
.TP
\fB--raid-type\fR \fI<RAID_TYPE>\fR
Required. The RAID type of new pool. Valid values are:
\fBNOT_APPLICABLE\fR, \fBJBOD\fR, \fBRAID0\fR, \fBRAID1\fR, \fBRAID5\fR,
\fBRAID6\fR, \fBRAID10\fR, \fBRAID50\fR, \fBRAID51\fR, \fBRAID60\fR,
\fBRAID61\fR.
.br
The \fBNOT_APPLICABLE\fR means pool only contain 1 disks.
For supported RAID types of certain array, please use \fBcapabilities\fR
command for POOL_CREATE_DISK_RAID_XXX entries.
.TP
\fB--member-id\fR \fI<DISK_ID>\fR
Required. Repeatable. The ID of disk to create new pool.
For two or more members: '\fB--member-id DISK_ID_A --member DISK_ID_B\fR'.
.TP
\fB--sys\fR \fI<SYS_ID>\fR
Required. ID of the system to create new pool.

.SS pool-create-from-volumes
Create a new pool by specifying which volumes to use with which RAID type.
This require POOL_CREATE_FROM_VOLUMES capability.
.TP 15
\fB--name\fR \fI<POOL_NAME>\fR
Required. Human friendly name for new pool.
.TP
\fB--raid-type\fR \fI<RAID_TYPE>\fR
Required. The RAID type of new pool. Valid values are:
\fBNOT_APPLICABLE\fR, \fBJBOD\fR, \fBRAID0\fR, \fBRAID1\fR, \fBRAID5\fR,
\fBRAID6\fR, \fBRAID10\fR, \fBRAID50\fR, \fBRAID51\fR, \fBRAID60\fR,
\fBRAID61\fR.
.br
The \fBNOT_APPLICABLE\fR means pool only contain 1 volume.
For supported RAID types of certain array, please use \fBcapabilities\fR
command for POOL_CREATE_VOLUME_RAID_XXX entries.
.TP
\fB--member-id\fR \fI<VOL_ID>\fR
Required. Repeatable. The ID of volume to create new pool.
For two or more members: '\fB--member-id VOL_ID_A --member VOL_ID_B\fR'.
.TP
\fB--sys\fR \fI<SYS_ID>\fR
Required. ID of the system to create new pool.

.SS pool-create-from-pool
Create a new sub-pool from specified pool. This require POOL_CREATE_FROM_POOLS
capability.
.TP 15
\fB--name\fR \fI<POOL_NAME>\fR
Required. Human friendly name for new pool.
.TP
\fB--size\fR \fI<POOL_SIZE>\fR
Required. The spaces of new pool.
See \fBSIZE OPTION\fR for allowed formats.
.TP
\fB--member-id\fR \fI<POOL_ID>\fR
Required. The ID of pool to create new pool from.
.TP
\fB--sys\fR \fI<SYS_ID>\fR
Required. ID of the system to create new pool.

.SS pool-delete
Deletes a storage pool.
.TP 15
\fB--pool\fR \fI<POOL_ID>\fR
Required. The ID of pool to delete.

.IP
.SH SIZE OPTION
.SS \fB--size\fR \fI\fI<SIZE>\fR\fR
Storage space size. Format is '\fI<number>\fR' + '\fI<prefix>\fR'. Example:
"10GiB", "20.5MB". No postfix indicates bytes. Valid prefixes are:
    KiB,                    # 2^10 Bytes
    MiB,                    # 2^20 Bytes
    GiB,                    # 2^30 Bytes
    TiB,                    # 2^40 Bytes
    PiB,                    # 2^50 Bytes
    EiB,                    # 2^60 Bytes
    KB,                     # 10^3 Bytes
    MB,                     # 10^6 Bytes
    GB,                     # 10^9 Bytes
    TB,                     # 10^12 Bytes
    PB,                     # 10^15 Bytes
    EB,                     # 10^17 Bytes

These prefixes are supported also, but not recommended:
    K, M, G, T, P, E,       # equal to KiB, MiB, and etc
    k, m, g, t, p, e,       # equal to KiB, MiB, and etc

.SH FILES
.TP 15
~/.lsmcli
lsmcli configuration file, containing name-value pairs separated
by '='. The only currently supported configuration option is 'uri',
such as 'uri=ontap://user@filer.example.com'.

Configuration options in .lsmcli are only used if not overridden by
command-line option or environment variable.

.SH EXAMPLES (command output omitted for brevity)
.TP 15
Simulator, list pools (no password required)
$ lsmcli -u sim:// -l POOLS
.TP 15
NetApp, list volumes (prompting for password)
$ lsmcli -u ontap://root@host/ -l VOLUMES -P
.TP 15
SMI-S, list systems (prompting for password)
.nf
$ lsmcli -u smispy://username@host:5988/?namespace=root/interop \\
        -l SYSTEMS -P
.fi
.TP 15
Targetd, list pools (using env variables for URI and password)
$ export LSMCLI_URI=targetd://username@host:18700
.br
$ export LSMCLI_PASSWORD=\fI<password>\fR
.br
$ lsmcli -l POOLS
.TP 15
NexentaStor, create volume (using environment variables for URI and password)
.nf
$ export LSMCLI_URI='nstor://user@host'
$ export LSMCLI_PASSWORD=\fI<password>\fR
$ lsmcli volume-create --name volume_name --size 1TiB --pool default
.fi
.TP 15
SMI-S, create volume (using environment variables for URI and password)
.nf
$ export LSMCLI_URI='smispy+ssl://user@host:5989?namespace=root/emc'
$ export LSMCLI_PASSWORD=\fI<password>\fR
$ lsmcli volume-create --name volume_name --size 1TiB --pool default
.fi

.SH ENVIRONMENT
.TP 17
LSMCLI_URI
The URI for the storage array in question.
.TP 17
LSMCLI_PASSWORD
The password to use for the array.

.SH NOTES
.TP 8
Plugin installation
Plugins are installed individually except for the simulator which is always
included.

.TP 8
Secure sockets layer (SSL)
All of the plugins (except the simulator) support SSL when communicating from
the plugin to the array.  This is accomplished by adding "+ssl" to the plugin
and usually by selecting a different port number from non-SSL communications.
.br
.nf
$ lsmcli -u smispy+ssl://username@host:5989/?namespace=interop \\
        list --type SYSTEMS -P
.fi

.TP 8
SSL error: certificate verify failed
When using SMI-S plugin with SSL against self-signed SMI-S provider, lsmcli
normally quit with '\fBSSL error: certificate verify failed\fR'. Please
contact SMI-S provider support to setup the self-signed certificate in your
system. If you prefer to bypass the certificate check, add 'no_ssl_verify=yes'
at the end of URI, for example:
.RS 12
.nf
\fBsmispy+ssl://admin@emc-smi:5989?namespace=root/emc&no_ssl_verify=yes\fR
.fi

.SH BUGS
Please report bugs to
\fI<libstoragemgmt-devel@lists.sourceforge.net>\fR
.SH AUTHOR
Tony Asleson \fI<tasleson@redhat.com>\fR
.br
Gris Ge \fI<fge@redhat.com>\fR
